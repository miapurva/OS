#include <cstdlib>
#include <iostream>
#include <ctime>
#include "hrrn.h"
using namespace std;

void hrrn_h::hrrn()
{
	srand(time(NULL));
	int n=5,b, index=0;
	float sum_wait=0;
	//cout<<"Enter the number of processes:\t ";
	//n=rand()%7;
	cout<<"\t\t\t\tHighest Response Ratio Next\n";
	cout<<"\t\t\t\t---------------------------\n";
	cout<<"Choose your type of input:\n";
	cout<<"\tManual inputs: (0)\t";
	cout<<"\tAutogenerated inputs (1)\n";
	cout<<"Answer: ";
	cin>>b;
	if(b==0)
	{
		for(int i=0; i<n; i++)
		{
			cout<<"Enter the arrival time:\t";
			cin>>arrival_Time[i];
			cout<<"Enter the Burst time:\t";
			cin>>burst_Time[i];
			pid[i]=i+1;
		}
	}
	else if(b==1)
	{
		for(int i=0; i<n; i++)
		{
			pid[i]=i+1;
			arrival_Time[i]=rand()%10;
			burst_Time[i]=(rand()%10)+1;
		}		
	}

	for(int i=0; i < n-1; i++)
	{
		int temp;
		for(int j=0; j < n-i-1; j++)
		{
			if(arrival_Time[j]>arrival_Time[j+1])
			{
				temp=arrival_Time[j];
				arrival_Time[j]=arrival_Time[j+1];
				arrival_Time[j+1]=temp;

				temp=burst_Time[j];
				burst_Time[j]=burst_Time[j+1];
				burst_Time[j+1]=temp;

				temp=pid[j];
				pid[j]=pid[j+1];
				pid[j+1]=temp;
			}
		}
	}
	for (int i = 0; i <  n; ++i)
	{
		cout<<arrival_Time[i]<<" "<<burst_Time[i]<<" "<<endl;
	}

	for(int i=0; i<n; i++)
	{
		check[i]=0;
	}

	int remain=0,time=arrival_Time[0],index1;

	while(remain!=n)
	{  
		int flag=0;
		float total=0;
		//fetching processes
		if(time>=arrival_Time[4])
			{
				//cout<<"last arrival"<<arrival_Time[4]<<endl;
                index1=n;
			}
		else
		{	
			for (int i = 0; i < n; i++)
			{   
				if(arrival_Time[i] > time)
				{  
					index1=i;
					break;
				}
			}
	    }
	    //getting the hrrn 
	    if(index1>1)
	    {
	    	for (int k = 0; k < index1; k++)
	    	{
		    	if(check[k]==0)
			    {
			    	total=time-arrival_Time[k]+burst_Time[k];
					response_Ratio[k]=total/burst_Time[k]; 
					
			    }
	    	}
	    }

	    float maxres=0;
		for (int j = 0; j < index1; j++)
		{
			//first process
			if (check[j]==0 && j==0)
			{
				index=j;
				flag=1;
			}
			else if(response_Ratio[j]>maxres && index1>1 && check[j]==0 && j!=0)
			{
				maxres=response_Ratio[j];
				index=j;
				flag=1;
			}	
		}

		check[index]=1;
		//when processor is idle
		if(flag==0 && check[index]==1)
		{
			
			time++;
		}
		//calculation for the first process
		else if(time==arrival_Time[0])
		{
			
			completion_Time[index]=arrival_Time[index]+burst_Time[index];
			//cout<<"completion Time"<< completion_Time[index];
			turn_Around_Time[index]=completion_Time[index]-arrival_Time[index];
			waiting_Time[index]=turn_Around_Time[index]-burst_Time[index];
			time=completion_Time[index];
			remain++;
		}
		//calculation for all processes except first
		else if(time>arrival_Time[0])
		{
			completion_Time[index]=time+ burst_Time[index];
			turn_Around_Time[index]=completion_Time[index]-arrival_Time[index];
			waiting_Time[index]=turn_Around_Time[index]-burst_Time[index];
			time=completion_Time[index];
			remain++;

		}
		sum_wait=sum_wait+waiting_Time[index];
	}
	cout<<"PID  Arrival Time   Burst Time   Completion Time  Turn Around Time  Waiting Time \n";
	for (int i = 0; i < n; ++i)
	{
		cout<<pid[i]<<"\t "<<arrival_Time[i]<<" \t\t"<<burst_Time[i]<<" \t\t"<<completion_Time[i]<<" \t\t"<<turn_Around_Time[i]<<" \t\t"<<waiting_Time[i]<<"\n";
	}
	cout<<"\n\nAverage waiting time ="<<sum_wait*1.0/n<<endl;


	
}