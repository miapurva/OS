#include "prioritynpe_h.h"
#include <cstdlib>
#include <ctime>
#include <iostream>
using namespace std;

void priority_npe_h::priority_npe()
{
	srand(time(NULL));
	int n=5,b, CT=0, index=0;
	float sum_wait=0;
	//cout<<"Enter the number of processes:\t ";
	//n=rand()%7;
	cout<<"\t\t\t\tPriority Non-preemptive\n";
	cout<<"\t\t\t\t-----------------------\n";
	cout<<"Choose your type of input:\n";
	cout<<"\tManual inputs: (0)\t";
	cout<<"\tAutogenerated inputs (1)\n";
	cout<<"Answer: ";
	cin>>b;
	if(b==0)
	{
		for(int i=0; i<n; i++)
		{
			cout<<"Enter the arrival time:\t";
			cin>>arrival_Time[i];
			cout<<"Enter the Burst time:\t";
			cin>>burst_Time[i];
			
			cout<<"Enter the Priority:\t";
			cin>>priority_Array[i];
			pid[i]=i+1;
		}
	}
	else if(b==1)
	{
	for(int i=0; i<n; i++)
		{
			pid[i]=i+1;
			arrival_Time[i]=rand()%10;
			burst_Time[i]=(rand()%10)+1;
			priority_Array[i]=(rand()%10)+1;
		}		
	}
	
	/*
	for (int i = 0; i <  n; ++i)
	{
		cout<<arrival_Time[i]<<" "<<burst_Time[i]<<endl;
	}*/
	for(int i=0; i < n-1; i++)
	{
		int temp;
		for(int j=0; j < n-i-1; j++)
		{
			if(arrival_Time[j]>arrival_Time[j+1])
			{
				temp=arrival_Time[j];
				arrival_Time[j]=arrival_Time[j+1];
				arrival_Time[j+1]=temp;

				temp=burst_Time[j];
				burst_Time[j]=burst_Time[j+1];
				burst_Time[j+1]=temp;

				temp=priority_Array[j];
				priority_Array[j]=priority_Array[j+1];
				priority_Array[j+1]=temp;

				temp=pid[j];
				pid[j]=pid[j+1];
				pid[j+1]=temp;
			}
		}
	}
	for (int i = 0; i <  n; ++i)
	{
		cout<<arrival_Time[i]<<" "<<burst_Time[i]<<" "<<priority_Array[i]<<endl;
	}

	for(int i=0; i<n; i++)
	{
		check[i]=0;
	}
	int remain=0,time=arrival_Time[0],index1;

	
	while(remain!=5)
	{  
		int flag=0;
		//cout<<"ini time"<<time<<endl;
        //cout<<"at5"<<arrival_Time[4]<<endl;
		if(time>=arrival_Time[4])
			{
				//cout<<"hello";
                index1=n;
			}
		else
		{	
			for (int i = 0; i < n; ++i)
			{   
				if(arrival_Time[i] > time)
				{  // cout<<"at  "<<arrival_Time[i]<<endl;
					index1=i;
					break;
				}
			}

	    }
		//cout<<"no of pro"<<index1<<endl;
		int max=0;

		for (int j = 0; j < index1; ++j)
		{
			
			if (priority_Array[j] > max  && check[j]==0)
			{
				//cout<<"hellopeeps"<<endl;
				max= priority_Array[j];
				index=j;
				flag=1;
				//check[index]=1;
			}
		}
		check[index]=1;

		//cout<<"pri"<<index<<endl;
		
		//cout<<"check array"<<endl;
		
		/*for(int i=0; i<n; i++)
	   {
		cout<<check[i]<<endl;
	   }*/
	   //cout<<"flag1 "<<flag<<endl;
		if(flag==0 && check[index]==1)
		{
			//cout<<"flag "<<flag;
			time++;
		}

		else if(time==arrival_Time[0])
		{
			completion_Time[index]=arrival_Time[index]+burst_Time[index];
			turn_Around_Time[index]=completion_Time[index]-arrival_Time[index];
			waiting_Time[index]=turn_Around_Time[index]-burst_Time[index];
			//sum_wait+=waiting_Time[index];
			time=completion_Time[index];
			remain++;
		}
		else if(time>arrival_Time[0])
		{
			completion_Time[index]=time+ burst_Time[index];
			turn_Around_Time[index]=completion_Time[index]-arrival_Time[index];
			waiting_Time[index]=turn_Around_Time[index]-burst_Time[index];
			//sum_wait+=waiting_Time[index1];
			time=completion_Time[index];
			remain++;
		}
		sum_wait=sum_wait+waiting_Time[index];
		//cout<<"time"<<time<<endl;
		//cout<<pid[i]<<"\t "<<arrival_Time[i]<<" \t\t"<<burst_Time[i]<<" \t\t"<<priority_Array[i]<<" \t\t"<<completion_Time[i]<<"\n";

		//cout<<pid[index]<<"\t "<<arrival_Time[index]<<" \t\t"<<burst_Time[index]<<" \t\t"<<priority_Array[index]<<" \t\t"<<completion_Time[index]<<" \t\t"<<turn_Around_Time[index]<<" \t\t"<<waiting_Time[index]<<"\n";
	}
	
	cout<<"PID  Arrival Time   Burst Time  Priority Array  Completion Time  Turn Around Time  Waiting Time \n";
	for (int i = 0; i < n; ++i)
	{
		cout<<pid[i]<<"\t "<<arrival_Time[i]<<" \t\t"<<burst_Time[i]<<" \t\t"<<priority_Array[i]<<" \t\t"<<completion_Time[i]<<" \t\t"<<turn_Around_Time[i]<<" \t\t"<<waiting_Time[i]<<"\n";
	}
	/*for (int i = 0; i < 5; ++i)
	{
		sum_wait=sum_wait+waiting_Time[index];
	}*/
	cout<<"\n\nAverage waiting time ="<<sum_wait*1.0/n<<endl;
}
