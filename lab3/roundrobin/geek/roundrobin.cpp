#include <iostream>
#include "roundrobin.h"
#include <cstdlib>
#include <ctime>
using namespace std;

void roundrob::robinround()
{
    srand(time(NULL));
    int n,TQ,temp,b;
    //int RQ[n];
    float sum_wait=0;

    cout<<"\t\t\t\tRound_Robin\n";
    cout<<"\t\t\t\t-----------\n";
    cout<<"Choose your type of input:\n";
    cout<<"\tManual inputs: (0)\t";
    cout<<"\tAutogenerated inputs (1)\n";
    cout<<"Answer: ";
    cin>>b;
    if(b==0)
    {
        cout<<"Enter the number of processes:\n";
        cin>>n;
        cout<<"Enter the Time Quantum value:\n";
        cin>>TQ;
        for(int i=0; i<n; i++)
        {
            cout<<"Enter the arrival time:\t";
            cin>>arrival_Time[i];
            cout<<"Enter the Burst time:\t";
            cin>>burst_Time[i];
            remaining_Time[i]=burst_Time[i];
            pid[i]=i+1;
        }
    }
    else if(b==1)
    {
        n=rand()%7;
        TQ=(rand()%5)+1;
        for(int i=0; i<n; i++)
            {   
                pid[i]=i+1;
                arrival_Time[i]=rand()%10;
                burst_Time[i]=(rand()%10)+1;
                remaining_Time[i]=burst_Time[i];
            }       
    }

    for(int i = 0; i < n-1; i++)
    {
        for (int j = 0; j < n-1-i; j++)
        {
            if(arrival_Time[j]>arrival_Time[j+1])
            {
                temp=arrival_Time[j];
                arrival_Time[j]=arrival_Time[j+1];
                arrival_Time[j+1]=temp;

                temp=burst_Time[j];
                burst_Time[j]=burst_Time[j+1];
                burst_Time[j+1]=temp;

                temp=remaining_Time[j];
                remaining_Time[j]=remaining_Time[j+1];
                remaining_Time[j+1]=temp;

                temp=pid[j];
                pid[j]=pid[j+1];
                pid[j+1]=temp;
            }
        }
    }
    for (int i = 0; i < n; ++i)
    {
       cout<<arrival_Time[i]<<" "<<burst_Time[i]<<endl;
    }
    
    int time = arrival_Time[0]; // Current time
 
    while (1)
    {
        bool done =true;
        for (int i = 0 ; i < n; i++)
        {
            if (remaining_Time[i] > 0 && arrival_Time[i] < time)
            {
                done = false; // There is a pending process
 
                if (remaining_Time[i] > TQ)
                {
                    time += TQ;
                    remaining_Time[i] -= TQ;
                }
                else
                {
                    time = time + remaining_Time[i];
                    completion_Time[i]=time;
                   
                    waiting_Time[i] = time - burst_Time[i];
                    remaining_Time[i] = 0;
                }
            }
        }
        //all processes are done
        if (done == true)
          break;
    }
    for (int i = 0; i < n ; i++)
        turn_Around_Time[i] = burst_Time[i] + waiting_Time[i];
    cout<<"PID  Arrival Time   Burst Time   Completion Time   TurnAround Time  Waiting Time\n";
    int total_wt=0,total_tat=0;
    for (int i=0; i<n; i++)
    {
        total_wt = total_wt + waiting_Time[i];
        total_tat = total_tat + turn_Around_Time[i];
        cout << " " << i+1 <<" \t\t"<<arrival_Time[i]<< "\t\t" << burst_Time[i] <<"\t\t "<<completion_Time[i]<<" \t\t"
             << waiting_Time[i] <<"\t\t " << turn_Around_Time[i] <<endl;
    }
    cout << "Average waiting time = "
         << (float)total_wt / (float)n;
    cout << "\nAverage turn around time = "
         << (float)total_tat / (float)n;

}